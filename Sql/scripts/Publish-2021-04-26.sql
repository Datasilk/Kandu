/*
Deployment script for Kandu

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Kandu"
:setvar DefaultFilePrefix "Kandu"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQL2017\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQL2017\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__favorite__44FF419A];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__archived__45F365D3];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__security__46E78A0C];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__color__47DBAE45];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__datecrea__48CFD27E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__lastmodi__49C3F6B7];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Boards]...';


GO
ALTER TABLE [dbo].[Boards] DROP CONSTRAINT [DF__Boards__type__4AB81AF0];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__ownerId__5812160E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__security__59063A47];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__name__59FA5E80];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__datecreat__5AEE82B9];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__website__5BE2A6F2];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [DF__Teams__descripti__5CD6CB2B];


GO
PRINT N'Dropping unnamed constraint on [dbo].[TeamMembers]...';


GO
ALTER TABLE [dbo].[TeamMembers] DROP CONSTRAINT [DF__TeamMembe__secur__571DF1D5];

GO
/*
The column [dbo].[Boards].[favorite] is being dropped, data loss could occur.

The column [dbo].[Boards].[security] is being dropped, data loss could occur.

The column [dbo].[Boards].[teamId] on table [dbo].[Boards] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/
GO
PRINT N'Starting rebuilding table [dbo].[Boards]...';

BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Boards] (
    [boardId]      INT           NOT NULL,
    [teamId]       INT           NOT NULL,
    [orgId]        INT           DEFAULT 0 NOT NULL,
    [archived]     BIT           DEFAULT 0 NOT NULL,
    [name]         NVARCHAR (64) NOT NULL,
    [color]        NVARCHAR (6)  DEFAULT '' NOT NULL,
    [datecreated]  DATETIME      DEFAULT GETDATE() NOT NULL,
    [lastmodified] DATETIME      DEFAULT GETDATE() NOT NULL,
    [type]         INT           DEFAULT 0 NOT NULL,
    PRIMARY KEY CLUSTERED ([boardId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Boards])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Boards] ([boardId], [teamId], [archived], [name], [color], [datecreated], [lastmodified], [type])
        SELECT   [boardId],
                 [teamId],
                 [archived],
                 [name],
                 [color],
                 [datecreated],
                 [lastmodified],
                 [type]
        FROM     [dbo].[Boards]
        ORDER BY [boardId] ASC;
    END

DROP TABLE [dbo].[Boards];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Boards]', N'Boards';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[TeamMembers]...';


GO
ALTER TABLE [dbo].[TeamMembers] DROP COLUMN [security];
GO
ALTER TABLE [dbo].[BoardMembers] ADD [favorite] BIT;
GO
/*
The column [dbo].[Teams].[security] is being dropped, data loss could occur.

The column [dbo].[Teams].[website] is being dropped, data loss could occur.

The column [dbo].[Teams].[ownerId] on table [dbo].[Teams] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/
GO
PRINT N'Starting rebuilding table [dbo].[Teams]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Teams] (
    [teamId]      INT            NOT NULL,
    [orgId]       INT            DEFAULT 0 NOT NULL,
    [ownerId]     INT            NOT NULL,
    [name]        NVARCHAR (64)  DEFAULT '' NOT NULL,
    [datecreated] DATETIME       DEFAULT GETDATE() NOT NULL,
    [description] NVARCHAR (MAX) DEFAULT '' NOT NULL,
    PRIMARY KEY CLUSTERED ([teamId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Teams])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Teams] ([teamId], [ownerId], [name], [datecreated], [description])
        SELECT   [teamId],
                 [ownerId],
                 [name],
                 [datecreated],
                 [description]
        FROM     [dbo].[Teams]
        ORDER BY [teamId] ASC;
    END

DROP TABLE [dbo].[Teams];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Teams]', N'Teams';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[BoardTeams]...';


GO
CREATE TABLE [dbo].[BoardTeams] (
    [boardId] INT NOT NULL,
    [teamId]  INT NOT NULL
);


GO
PRINT N'Creating [dbo].[Organizations]...';


GO
CREATE TABLE [dbo].[Organizations] (
    [orgId]       INT            NOT NULL,
    [ownerId]     INT            NOT NULL,
    [name]        NVARCHAR (64)  NOT NULL,
    [datecreated] DATETIME2 (7)  NOT NULL,
    [website]     NVARCHAR (255) NOT NULL,
    [description] NVARCHAR (MAX) NOT NULL,
    [banner]      BIT            NOT NULL,
    [photo]       BIT            NOT NULL,
    [enabled]     BIT            NOT NULL,
    [isprivate]   BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([orgId] ASC)
);


GO
PRINT N'Creating [dbo].[OrgSecurity]...';


GO
CREATE TABLE [dbo].[OrgSecurity] (
    [orgId]   INT          NOT NULL,
    [userId]  INT          NOT NULL,
    [key]     VARCHAR (32) NOT NULL,
    [enabled] BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([orgId] ASC, [userId] ASC, [key] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT GETUTCDATE() FOR [datecreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT '' FOR [website];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT '' FOR [description];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT 0 FOR [banner];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT 0 FOR [photo];
	
GO
ALTER TABLE [dbo].[BoardMembers]
    ADD DEFAULT 0 FOR [favorite];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organizations]...';


GO
ALTER TABLE [dbo].[Organizations]
    ADD DEFAULT 1 FOR [isprivate];


GO
PRINT N'Creating unnamed constraint on [dbo].[OrgSecurity]...';


GO
ALTER TABLE [dbo].[OrgSecurity]
    ADD DEFAULT 0 FOR [enabled];

GO
PRINT N'Creating [dbo].[SequenceOrganizations]...';


GO
CREATE SEQUENCE [dbo].[SequenceOrganizations]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    NO CACHE;


GO
PRINT N'Altering [dbo].[Board_MemberExists]...';


GO
ALTER PROCEDURE [dbo].[Board_MemberExists]
	@userId int,
	@boardId int
AS
	IF (SELECT COUNT(*) FROM TeamMembers tm
		JOIN BoardTeams bt ON bt.teamId=tm.teamId AND bt.boardId=@boardId
	WHERE userId=@userId) = 1 BEGIN
		SELECT 1
	END ELSE BEGIN
		SELECT 0
	END
GO
PRINT N'Altering [dbo].[Boards_GetList]...';


GO
ALTER PROCEDURE [dbo].[Boards_GetList]
	@userId int
AS
	SELECT DISTINCT b.*, org.sort, org.[name] AS orgName, bm.favorite 
	FROM TeamMembers tm
	JOIN BoardTeams bt ON bt.teamId = tm.teamId
	JOIN Boards b ON b.boardId = bt.boardId
	JOIN Teams t ON t.teamId = tm.teamId
	LEFT JOIN BoardMembers bm ON bm.boardId=bt.boardId AND bm.userId=@userId
	CROSS APPLY (
		SELECT 
		CASE WHEN o.ownerId=@userId THEN 0 ELSE 1 END AS sort,
		o.orgId, o.[name]
		FROM Organizations o
		WHERE o.orgId = t.orgId
	) AS org
	WHERE tm.userId=@userId
	ORDER BY org.sort ASC, org.[name] ASC, bm.favorite DESC, b.lastmodified DESC
GO
PRINT N'Altering [dbo].[Board_Update]...';


GO
ALTER PROCEDURE [dbo].[Board_Update]
	@boardId int,
	@orgId int,
	@name nvarchar(64),
	@color nvarchar(6) = ''
AS
	UPDATE Boards SET [name]=@name, [color]=@color
	WHERE boardId=@boardId AND orgId=@orgId
GO
PRINT N'Altering [dbo].[Team_Create]...';


GO
ALTER PROCEDURE [dbo].[Team_Create]
	@orgId int,
	@ownerId int,
	@name nvarchar(64),
	@description nvarchar(MAX) = ''
AS
	DECLARE @teamId int = NEXT VALUE FOR SequenceTeams
	INSERT INTO Teams (teamId, orgId, [name], datecreated, [description])
	VALUES (@teamId, @orgId, @name, GETDATE(), @description)

	INSERT INTO TeamMembers (teamId, userId) VALUES (@teamId, @ownerId)

	SELECT @teamId
GO
PRINT N'Altering [dbo].[Team_Get]...';


GO
ALTER PROCEDURE [dbo].[Team_Get]
	@orgId int,
	@teamId int
AS
	SELECT * FROM Teams WHERE teamId=@teamId AND orgId=@orgId
GO
PRINT N'Altering [dbo].[Team_Update]...';


GO
ALTER PROCEDURE [dbo].[Team_Update]
	@teamId int,
	@orgId int,
	@name nvarchar(64),
	@description nvarchar(MAX)
AS
	UPDATE Teams SET
	[name]=@name,
	[description]=@description
	WHERE teamId=@teamId AND orgId=@orgId
GO
PRINT N'Altering [dbo].[Teams_GetList]...';


GO
ALTER PROCEDURE [dbo].[Teams_GetList]
	@orgId int,
	@start int = 1,
	@length int = 20,
	@search nvarchar(MAX) = '',
	@orderby int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT *
	FROM (
		SELECT ROW_NUMBER() 
		OVER (ORDER BY
		CASE WHEN @orderby = 0 THEN teamId END ASC,
		CASE WHEN @orderby = 1 THEN [name] END DESC,
		CASE WHEN @orderby = 2 THEN datecreated END ASC
		) as rownum, *
		FROM Teams
		WHERE 
		(
			(@orgId > 0 AND orgId = @orgId)
			OR @orgId <= 0
		)
		AND
		(
			(@search <> '' AND [name] LIKE '%' + @search + '%')
			OR @search = ''
		)
		AND
		(
			(@search <> '' AND [description] LIKE '%' + @search + '%')
			OR @search = ''
		)
	) as myTable
	WHERE rownum >= @start AND  rownum <= @start + @length
END
GO
PRINT N'Altering [dbo].[Board_GetDetails]...';


GO
ALTER PROCEDURE [dbo].[Board_GetDetails]
	@boardId int
AS
	/* [0] Board Info */
	SELECT * FROM Boards WHERE boardId=@boardId

	/* [1] Board Teams */
	SELECT t.* FROM BoardTeams bt
	JOIN Teams t ON t.teamId = bt.teamId
	WHERE bt.boardId=@boardId

	/* [2] Lists */
	SELECT * FROM Lists WHERE boardId=@boardId AND archived=0 ORDER BY sort ASC

	/* [3] Cards */
	EXEC Cards_GetList @boardId=@boardId, @archivedOnly=0
GO
PRINT N'Creating [dbo].[Board_Favorite]...';


GO
CREATE PROCEDURE [dbo].[Board_Favorite]
	@boardId int,
	@userId int
AS
	IF EXISTS(SELECT * FROM BoardMembers WHERE boardId=@boardId AND userId=@userId) BEGIN
		UPDATE BoardMembers SET favorite=1 WHERE boardId=@boardId AND userId=@userId
	END ELSE BEGIN
		INSERT INTO BoardMembers (boardId, userId, favorite) VALUES (@boardId, @userId, 1)
	END
GO
PRINT N'Creating [dbo].[Board_Unfavorite]...';


GO
CREATE PROCEDURE [dbo].[Board_Unfavorite]
	@boardId int,
	@userId int
AS
	IF EXISTS(SELECT * FROM BoardMembers WHERE boardId=@boardId AND userId=@userId) BEGIN
		UPDATE BoardMembers SET favorite=0 WHERE boardId=@boardId AND userId=@userId
	END ELSE BEGIN
		INSERT INTO BoardMembers (boardId, userId, favorite) VALUES (@boardId, @userId, 0)
	END
GO
PRINT N'Creating [dbo].[Boards_MemberIsPartOf]...';


GO
CREATE PROCEDURE [dbo].[Boards_MemberIsPartOf]
	@userId int
AS
	SELECT boardId FROM BoardTeams bt
	JOIN TeamMembers tm ON tm.teamId = bt.teamId
	WHERE tm.userId=@userId
GO
PRINT N'Creating [dbo].[Organization_Create]...';


GO
CREATE PROCEDURE [dbo].[Organization_Create]
	@ownerId int,
	@name nvarchar(64),
	@website nvarchar(255) = '',
	@description nvarchar(MAX) = '',
	@isprivate bit = 1
AS
	DECLARE @orgId int = NEXT VALUE FOR SequenceOrganizations
	INSERT INTO Organizations(orgId, ownerId, [name], datecreated, website, [description], [isprivate])
	VALUES (@orgId, @ownerId, @name, GETUTCDATE(), @website, @description, @isprivate)
	SELECT @orgId

	INSERT INTO OrgSecurity (orgId, userId, [key], [enabled]) 
	VALUES (@orgId, @ownerId, 'owner', 1)
GO
PRINT N'Creating [dbo].[Organization_Disable]...';


GO
CREATE PROCEDURE [dbo].[Organization_Disable]
	@orgId int
AS
	UPDATE Organizations SET enabled=0 WHERE orgId=@orgId
GO
PRINT N'Creating [dbo].[Organization_Enable]...';


GO
CREATE PROCEDURE [dbo].[Organization_Enable]
	@orgId int
AS
	UPDATE Organizations SET enabled=1 WHERE orgId=@orgId
GO
PRINT N'Creating [dbo].[Organization_GetInfo]...';


GO
CREATE PROCEDURE [dbo].[Organization_GetInfo]
	@orgId int
AS
	SELECT * FROM Organizations WHERE orgId=@orgId
GO
PRINT N'Creating [dbo].[Organizations_Owned]...';


GO
CREATE PROCEDURE [dbo].[Organizations_Owned]
	@ownerId int
AS
	SELECT * FROM Organizations WHERE ownerId=@ownerId
GO
PRINT N'Creating [dbo].[Organizations_UserIsPartOf]...';


GO
CREATE PROCEDURE [dbo].[Organizations_UserIsPartOf]
	@userId int
AS
	SELECT DISTINCT * FROM Organizations o
	JOIN TeamMembers tm ON tm.userId=@userId
	JOIN Teams t ON t.orgId = o.orgId AND t.teamId=tm.teamId
	WHERE o.orgId=t.orgId
GO
PRINT N'Creating [dbo].[OrgSecurity_AllKeysForUser]...';


GO
CREATE PROCEDURE [dbo].[OrgSecurity_AllKeysForUser]
	@userId int
AS
	SELECT orgId, [key], [enabled] FROM OrgSecurity
	WHERE userId=@userId
	ORDER BY orgId
GO
PRINT N'Creating [dbo].[OrgSecurity_ForUser]...';


GO
CREATE PROCEDURE [dbo].[OrgSecurity_ForUser]
	@orgId int,
	@userId int
AS
	SELECT [key], [enabled] FROM OrgSecurity
	WHERE orgId=@orgId AND userId=@userId
GO
PRINT N'Creating [dbo].[OrgSecurity_SaveKeys]...';


GO
CREATE PROCEDURE [dbo].[OrgSecurity_SaveKeys]
	@orgId int,
	@userId int,
	@keys XML 
	/* example:	
		<keys>
			<key name="manage-team" value="1"></key>
			<key name="manage-security" value="1"></key>
			<key name="upload" value="0"></key>
		</keys>
	*/
AS
	DECLARE @hdoc INT
	DECLARE @newkeys TABLE (
		[key] varchar(32),
		[value] bit
	)
	EXEC sp_xml_preparedocument @hdoc OUTPUT, @keys;

	INSERT INTO @newkeys
	SELECT x.[key], x.[value]
	FROM (
		SELECT * FROM OPENXML( @hdoc, '//key', 2)
		WITH (
			[key] varchar(32) '@name',
			[value] bit '@value'
		)
	) AS x
	
	DECLARE @cursor CURSOR 
	DECLARE @key varchar(32), @value bit
	SET @cursor = CURSOR FOR
	SELECT * FROM @newkeys
	FETCH NEXT FROM @cursor INTO @key, @value
	WHILE @@FETCH_STATUS = 0 BEGIN
		IF EXISTS(SELECT * FROM OrgSecurity WHERE orgId=@orgId AND userId=@userId AND [key]=@key) BEGIN
			UPDATE OrgSecurity SET [enabled] = @value WHERE orgId=orgId AND userId=@userId AND [key]=@key
		END ELSE BEGIN
			INSERT INTO OrgSecurity (orgId, userId, [key], [enabled]) 
			VALUES (@orgId, @userId, @key, @value)
		END
		FETCH NEXT FROM @cursor INTO @key, @value
	END
	CLOSE @cursor
	DEALLOCATE @cursor
GO
PRINT N'Altering [dbo].[Board_Create]...';


GO
ALTER PROCEDURE [dbo].[Board_Create]
	@orgId int,
	@teamId int,
	@userId int,
	@name nvarchar(64),
	@favorite bit = 0,
	@color nvarchar(6) = ''
AS
	DECLARE @boardId int = NEXT VALUE FOR SequenceBoards
	INSERT INTO Boards (boardId, orgId, [name], color)
	VALUES (@boardId, @orgId, @name, @color)

	INSERT INTO BoardTeams (boardId, teamId) VALUES (@boardId, @teamId)

	IF @favorite = 1 BEGIN
		EXEC Board_Favorite @boardId=@boardId, @userId=@userId
	END ELSE BEGIN
		EXEC Board_Unfavorite @boardId=@boardId, @userId=@userId
	END

	SELECT @boardId
GO
PRINT N'Altering [dbo].[Board_Import]...';


GO
ALTER PROCEDURE [dbo].[Board_Import]
	@orgId int,
	@teamId int,
	@userId int,
	@name nvarchar(64),
	@favorite bit = 0,
	@color nvarchar(6) = '',
	@merge bit = 0
AS
	DECLARE @oldId int = 0, @create bit = 1
	SELECT @oldId = boardId FROM Boards WHERE boardId IN (SELECT boardId FROM BoardMembers WHERE userId=@userId) AND [name]=@name
	CREATE TABLE #tmp (id int)

	IF @oldId IS NOT NULL AND @oldId > 0 BEGIN
		/* board already exists */
		IF @merge = 0 BEGIN
			/* do not merge. Instead, delete board and all associated lists, cards, comments, checklists, and activity */
			SELECT listId INTO #lists FROM Lists WHERE boardId=@oldId
			SELECT cardId INTO #cards FROM Cards WHERE listId IN (SELECT * FROM #lists)
			DELETE FROM CardMembers WHERE cardId IN (SELECT * FROM #cards)
			DELETE FROM CardComments WHERE cardId IN (SELECT * FROM #cards)
			DELETE FROM CardChecklistItems WHERE cardId IN (SELECT * FROM #cards)
			DELETE FROM CardChecklists WHERE cardId IN (SELECT * FROM #cards)
			DELETE FROM Cards WHERE boardId=@oldId
			DELETE FROM Lists WHERE boardId=@oldId
		END
		/* merge */
		UPDATE Boards SET @color=@color WHERE boardId=@oldId
		SET @create = 0
	END

	IF @create = 1 BEGIN
		INSERT INTO #tmp EXEC Board_Create @orgId=@orgId, @teamId=@teamId, @userId=@userId, @name=@name, @favorite=@favorite, @color=@color
		SELECT @oldId=id FROM #tmp
	END

	IF @favorite = 1 BEGIN
		EXEC Board_Favorite @boardId=@oldId, @userId=@userId
	END ELSE BEGIN
		EXEC Board_Unfavorite @boardId=@oldId, @userId=@userId
	END

	SELECT @oldId
GO
PRINT N'Altering [dbo].[User_Create]...';


GO
ALTER PROCEDURE [dbo].[User_Create]
	@name nvarchar(64),
	@email nvarchar(64),
	@password nvarchar(255),
	@photo bit = 0
AS
	DECLARE @userId int = NEXT VALUE FOR SequenceUsers
	INSERT INTO Users (userId, [name], email, [password], photo, datecreated)
	VALUES (@userId, @name, @email, @password, @photo, GETDATE())
	
	-- create organization for user
	DECLARE @tmp TABLE (id int)
	INSERT INTO @tmp EXEC Organization_Create @ownerId=@userId, @name='My Organization', @website='', @description='Personal Organization', @isprivate=1
	DECLARE @orgId int
	SELECT @orgId = id FROM @tmp

	-- create a team for the user
	EXEC Team_Create @orgId=@orgId, @ownerId=@userId, @name='My Team', @description='Personal Team'

	SELECT @userId
GO
PRINT N'Refreshing [dbo].[Lists_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Lists_GetList]';


GO
PRINT N'Refreshing [dbo].[Board_Archive]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Board_Archive]';


GO
PRINT N'Refreshing [dbo].[Board_GetInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Board_GetInfo]';


GO
PRINT N'Refreshing [dbo].[Board_GetLists]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Board_GetLists]';


GO
PRINT N'Refreshing [dbo].[Board_Modified]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Board_Modified]';


GO
PRINT N'Refreshing [dbo].[Board_Restore]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Board_Restore]';


GO
PRINT N'Refreshing [dbo].[Card_GetDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_GetDetails]';


GO
PRINT N'Refreshing [dbo].[User_Authenticate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[User_Authenticate]';


GO
PRINT N'Refreshing [dbo].[Card_Archive]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_Archive]';


GO
PRINT N'Refreshing [dbo].[Card_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_Create]';


GO
PRINT N'Refreshing [dbo].[Card_Move]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_Move]';


GO
PRINT N'Refreshing [dbo].[Card_Restore]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_Restore]';


GO
PRINT N'Refreshing [dbo].[List_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[List_Create]';


GO
PRINT N'Refreshing [dbo].[List_Move]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[List_Move]';


GO
PRINT N'Refreshing [dbo].[Card_Import]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Card_Import]';


GO
PRINT N'Refreshing [dbo].[List_Import]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[List_Import]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '02b47892-aade-4cdb-ab03-dd01ccb7ad88')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('02b47892-aade-4cdb-ab03-dd01ccb7ad88')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '357ce921-3745-4e6e-a1f0-f9ef3320fa73')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('357ce921-3745-4e6e-a1f0-f9ef3320fa73')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '77867c3d-8a02-4134-88f6-dd7f23fa3a78')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('77867c3d-8a02-4134-88f6-dd7f23fa3a78')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '486645c2-6ef6-4192-9833-e3a8d93d19b4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('486645c2-6ef6-4192-9833-e3a8d93d19b4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '53b29480-32d6-4d33-a693-53d1b4d02892')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('53b29480-32d6-4d33-a693-53d1b4d02892')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f496c0a2-b0c8-4949-aee1-3ebf7b71ec45')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f496c0a2-b0c8-4949-aee1-3ebf7b71ec45')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b2938c91-d84f-4051-9943-f23e5316f031')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b2938c91-d84f-4051-9943-f23e5316f031')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2ec8d575-c8e5-4e2c-a771-105f0e24a8d3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2ec8d575-c8e5-4e2c-a771-105f0e24a8d3')

GO

GO
PRINT N'Update complete.';


GO
